# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pairs_pb2 as pairs__pb2


class CentralServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/pairs.CentralServer/Register',
                request_serializer=pairs__pb2.ServerKey.SerializeToString,
                response_deserializer=pairs__pb2.KeyCount.FromString,
                )
        self.Map = channel.unary_unary(
                '/pairs.CentralServer/Map',
                request_serializer=pairs__pb2.Key.SerializeToString,
                response_deserializer=pairs__pb2.ServerID.FromString,
                )
        self.End = channel.unary_unary(
                '/pairs.CentralServer/End',
                request_serializer=pairs__pb2.Empty.SerializeToString,
                response_deserializer=pairs__pb2.EndResponse.FromString,
                )


class CentralServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Map(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def End(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CentralServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=pairs__pb2.ServerKey.FromString,
                    response_serializer=pairs__pb2.KeyCount.SerializeToString,
            ),
            'Map': grpc.unary_unary_rpc_method_handler(
                    servicer.Map,
                    request_deserializer=pairs__pb2.Key.FromString,
                    response_serializer=pairs__pb2.ServerID.SerializeToString,
            ),
            'End': grpc.unary_unary_rpc_method_handler(
                    servicer.End,
                    request_deserializer=pairs__pb2.Empty.FromString,
                    response_serializer=pairs__pb2.EndResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pairs.CentralServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CentralServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.CentralServer/Register',
            pairs__pb2.ServerKey.SerializeToString,
            pairs__pb2.KeyCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Map(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.CentralServer/Map',
            pairs__pb2.Key.SerializeToString,
            pairs__pb2.ServerID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def End(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.CentralServer/End',
            pairs__pb2.Empty.SerializeToString,
            pairs__pb2.EndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PairsServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Insert = channel.unary_unary(
                '/pairs.PairsServer/Insert',
                request_serializer=pairs__pb2.KeyValue.SerializeToString,
                response_deserializer=pairs__pb2.InsertResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/pairs.PairsServer/Search',
                request_serializer=pairs__pb2.Key.SerializeToString,
                response_deserializer=pairs__pb2.SearchResponse.FromString,
                )
        self.Activation = channel.unary_unary(
                '/pairs.PairsServer/Activation',
                request_serializer=pairs__pb2.ID.SerializeToString,
                response_deserializer=pairs__pb2.KeyCount.FromString,
                )
        self.End = channel.unary_unary(
                '/pairs.PairsServer/End',
                request_serializer=pairs__pb2.Empty.SerializeToString,
                response_deserializer=pairs__pb2.EndResponse.FromString,
                )


class PairsServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Insert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Activation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def End(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PairsServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=pairs__pb2.KeyValue.FromString,
                    response_serializer=pairs__pb2.InsertResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=pairs__pb2.Key.FromString,
                    response_serializer=pairs__pb2.SearchResponse.SerializeToString,
            ),
            'Activation': grpc.unary_unary_rpc_method_handler(
                    servicer.Activation,
                    request_deserializer=pairs__pb2.ID.FromString,
                    response_serializer=pairs__pb2.KeyCount.SerializeToString,
            ),
            'End': grpc.unary_unary_rpc_method_handler(
                    servicer.End,
                    request_deserializer=pairs__pb2.Empty.FromString,
                    response_serializer=pairs__pb2.EndResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pairs.PairsServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PairsServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.PairsServer/Insert',
            pairs__pb2.KeyValue.SerializeToString,
            pairs__pb2.InsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.PairsServer/Search',
            pairs__pb2.Key.SerializeToString,
            pairs__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Activation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.PairsServer/Activation',
            pairs__pb2.ID.SerializeToString,
            pairs__pb2.KeyCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def End(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pairs.PairsServer/End',
            pairs__pb2.Empty.SerializeToString,
            pairs__pb2.EndResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
